params {
  // Specific nf-core/configs params
  config_profile_description = 'nf-core/eager Sanger profile provided by nf-core/configs'
  config_profile_contact = 'Victoria Carr (@blue-moon22), William Roberts-Sengier (@Lfulcrum)'
  config_profile_url = 'https://www.sanger.ac.uk/group/pathogen-informatics/'
}

// Singularity and LSF options (overriding Sanger institutional nf-core config if necessary)
// I believe everything below, down to the process selectors e.g. withName, withLabel, would also work well in the nf-core sanger.config
singularity {
  enabled = true
  cacheDir = "${baseDir}/singularity"
  runOptions = '--bind /lustre --bind /nfs'
}

executor{
  name = 'lsf'
  perJobMemLimit = true
  submitRateLimit = '5 sec'
  killBatchSize = 50
}

params {
  max_memory = 2.9.TB  // max memory allowed for jobs submitted to teramem
  max_cpus = 64
  max_time = 720.h  // 'basement' queue RUNLIMIT
}

// Specific nf-core/eager process configuration
process {
  executor = 'lsf'
  queue = { task.memory > 745.GB ? 'teramem' :  // Note: teramem and hugemem are not available on pcs6 (large mem jobs should be run on farm5)
            task.memory > 196.GB ? 'hugemem' :
            task.time > 48.h ? 'basement' :
            task.time > 12.h & task.time <= 48.h ? 'long' :
            'normal' }
  errorStrategy = { task.attempt <= 5 ? 'retry' : 'finish' }
  process.maxRetries = 5

  withName: malt {
    maxRetries = 1
    memory = 725.GB
    cpus = 40
    time = 24.h
  }

  withLabel:'sc_tiny'{
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
    time = { task.attempt == (task.maxRetries + 1) ? 720.h :
             2.h * (2 ** task.attempt) }
  }

  withLabel:'sc_small'{
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { task.attempt == (task.maxRetries + 1) ? 720.h :
             2.h * (2 ** task.attempt) }
  }

  withLabel:'sc_medium'{
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { task.attempt == (task.maxRetries + 1) ? 720.h :
             2.h * (2 ** task.attempt) }
  }

  withLabel:'mc_small'{
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { task.attempt == (task.maxRetries + 1) ? 720.h :
             2.h * (2 ** task.attempt) }
  }

  withLabel:'mc_medium' {
    cpus = { check_max( 4, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { task.attempt == (task.maxRetries + 1) ? 720.h :
             2.h * (2 ** task.attempt) }
  }

  withLabel:'mc_large'{
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { task.attempt == (task.maxRetries + 1) ? 720.h :
             2.h * (2 ** task.attempt) }
  }

  withLabel:'mc_huge'{
    cpus = { check_max( 32, 'cpus' ) }
    memory = { check_max( 256.GB * task.attempt, 'memory' ) }
    time = { task.attempt == (task.maxRetries + 1) ? 720.h :
             2.h * (2 ** task.attempt) }
  }
}

// Create domain-specific profiles below

